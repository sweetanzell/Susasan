'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTestRenderer = require('react-test-renderer');

var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _accordion = require('./accordion');

var _accordion2 = _interopRequireDefault(_accordion);

var _accordionItem = require('../AccordionItem/accordion-item');

var _accordionItem2 = _interopRequireDefault(_accordionItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('../AccordionItem/accordion-item', function () {
    return 'div';
});

describe('Accordion', function () {
    it('renders correctly with min params', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            null,
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('renders correctly with accordion false', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { accordion: false },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('different className', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { accordion: false, className: 'testCSSClass' },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('handleClick function accordion true', function () {
        var wrapper = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            null,
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        wrapper.getInstance().handleClick(1);
        expect(wrapper.getInstance().state.activeItems).toEqual([1]);
        expect(wrapper).toMatchSnapshot();

        wrapper.getInstance().handleClick(1);
        expect(wrapper.getInstance().state.activeItems).toEqual([]);
        expect(wrapper).toMatchSnapshot();
    });

    it('handleClick function accordion false', function () {
        var wrapper = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { accordion: false },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        wrapper.getInstance().handleClick(1);
        expect(wrapper.getInstance().state.activeItems).toEqual([1]);
        expect(wrapper).toMatchSnapshot();

        wrapper.getInstance().handleClick(1);
        expect(wrapper.getInstance().state.activeItems).toEqual([]);
        expect(wrapper).toMatchSnapshot();

        wrapper.getInstance().handleClick(0);
        wrapper.getInstance().handleClick(1);
        expect(wrapper.getInstance().state.activeItems).toEqual([0, 1]);
        expect(wrapper).toMatchSnapshot();
    });

    it('handles disabled children', function () {
        var wrapper = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { accordion: false },
            _react2.default.createElement(
                _accordionItem2.default,
                { disabled: true },
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        wrapper.getInstance().handleClick(0);
        expect(wrapper).toMatchSnapshot();
    });

    it('pre expanded accordion', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            null,
            _react2.default.createElement(
                _accordionItem2.default,
                { expanded: true },
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('works with multiple pre expanded accordion. Extra expands are just ignored.', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            null,
            _react2.default.createElement(
                _accordionItem2.default,
                { expanded: true },
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                { expanded: true },
                'Fake Child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('pre expanded accordion when accordion is false', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { accordion: false },
            _react2.default.createElement(
                _accordionItem2.default,
                { expanded: true },
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                { expanded: true },
                'Fake Child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('pre expand accordion via accordion props', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { activeItems: [0] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('pre expand accordion via accordion props vs accordion item props. Expanded only second item.', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { activeItems: [0] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                { expanded: true },
                'Fake Child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('pre expand multiple accordions via accordion props', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { accordion: false, activeItems: [0, 2] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('pre expand accordion via accordion props with custom key', function () {
        var tree = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { activeItems: ['custom'] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                { customKey: 'custom' },
                'Fake Child'
            )
        )).toJSON();
        expect(tree).toMatchSnapshot();
    });

    it('expand accordion via accordion props dynamicly', function () {
        var wrapper = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { activeItems: [0] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        wrapper.update(_react2.default.createElement(
            _accordion2.default,
            { activeItems: [1] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        expect(wrapper.getInstance().state.activeItems).toEqual([1]);
        expect(wrapper).toMatchSnapshot();
    });

    it('expand multiple accordions via accordion props props dynamicly', function () {
        var wrapper = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { accordion: false, activeItems: [0, 2] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        wrapper.update(_react2.default.createElement(
            _accordion2.default,
            { accordion: false, activeItems: [1, 2] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        expect(wrapper.getInstance().state.activeItems).toEqual([1, 2]);
        expect(wrapper).toMatchSnapshot();
    });

    it('expand multiple accordions via accordion props props dynamicly with default\n        expanded on accordion items', function () {
        var wrapper = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { accordion: false },
            _react2.default.createElement(
                _accordionItem2.default,
                { expanded: true },
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        wrapper.update(_react2.default.createElement(
            _accordion2.default,
            { accordion: false, activeItems: [1, 2] },
            _react2.default.createElement(
                _accordionItem2.default,
                { expanded: true },
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        expect(wrapper.getInstance().state.activeItems).toEqual([1, 2]);
        expect(wrapper).toMatchSnapshot();
    });

    it('close accordions via accordion props props dynamicly', function () {
        var wrapper = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { activeItems: [1] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        wrapper.update(_react2.default.createElement(
            _accordion2.default,
            { activeItems: [] },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        expect(wrapper.getInstance().state.activeItems).toEqual([]);
        expect(wrapper).toMatchSnapshot();
    });

    it('different className with the same activeItems prop', function () {
        var wrapper = _reactTestRenderer2.default.create(_react2.default.createElement(
            _accordion2.default,
            { activeItems: [1], className: 'test-1' },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        wrapper.update(_react2.default.createElement(
            _accordion2.default,
            { activeItems: [1], className: 'test-2' },
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            ),
            _react2.default.createElement(
                _accordionItem2.default,
                null,
                'Fake Child'
            )
        ));
        expect(wrapper).toMatchSnapshot();
    });
});
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _consecutive = require('consecutive');

var _consecutive2 = _interopRequireDefault(_consecutive);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var nextUuid = (0, _consecutive2.default)();

var AccordionItem = function (_Component) {
    _inherits(AccordionItem, _Component);

    function AccordionItem() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, AccordionItem);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AccordionItem.__proto__ || Object.getPrototypeOf(AccordionItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            itemUuid: nextUuid()
        }, _this.renderChildren = _this.renderChildren.bind(_this), _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(AccordionItem, [{
        key: 'renderChildren',
        value: function renderChildren() {
            var _props = this.props,
                accordion = _props.accordion,
                expanded = _props.expanded,
                onClick = _props.onClick,
                children = _props.children;
            var itemUuid = this.state.itemUuid;


            return _react2.default.Children.map(children, function (item) {
                var itemProps = {};

                if (item.type.accordionElementName === 'AccordionItemTitle') {
                    itemProps.expanded = expanded;
                    itemProps.key = 'title';
                    itemProps.id = 'accordion__title-' + itemUuid;
                    itemProps.ariaControls = 'accordion__body-' + itemUuid;
                    itemProps.onClick = onClick;
                    itemProps.role = accordion ? 'tab' : 'button';

                    return _react2.default.cloneElement(item, itemProps);
                } else if (item.type.accordionElementName === 'AccordionItemBody') {
                    itemProps.expanded = expanded;
                    itemProps.key = 'body';
                    itemProps.id = 'accordion__body-' + itemUuid;
                    itemProps.role = accordion ? 'tabpanel' : null;

                    return _react2.default.cloneElement(item, itemProps);
                }

                return item;
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                className = _props2.className,
                expanded = _props2.expanded,
                hideBodyClassName = _props2.hideBodyClassName;


            var itemClassName = (0, _classnames2.default)(className, _defineProperty({}, hideBodyClassName, !expanded && hideBodyClassName));

            return _react2.default.createElement(
                'div',
                { className: itemClassName },
                this.renderChildren()
            );
        }
    }]);

    return AccordionItem;
}(_react.Component);

AccordionItem.defaultProps = {
    accordion: true,
    expanded: false,
    onClick: function onClick() {},
    className: 'accordion__item',
    hideBodyClassName: ''
};
exports.default = AccordionItem;